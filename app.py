{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b4ab6475",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Collecting folium\n",
      "  Using cached folium-0.20.0-py2.py3-none-any.whl.metadata (4.2 kB)\n",
      "Collecting branca>=0.6.0 (from folium)\n",
      "  Using cached branca-0.8.1-py3-none-any.whl.metadata (1.5 kB)\n",
      "Requirement already satisfied: jinja2>=2.9 in c:\\programdata\\anaconda3\\lib\\site-packages (from folium) (3.1.4)\n",
      "Requirement already satisfied: numpy in c:\\programdata\\anaconda3\\lib\\site-packages (from folium) (1.26.4)\n",
      "Requirement already satisfied: requests in c:\\programdata\\anaconda3\\lib\\site-packages (from folium) (2.32.3)\n",
      "Requirement already satisfied: xyzservices in c:\\programdata\\anaconda3\\lib\\site-packages (from folium) (2022.9.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from jinja2>=2.9->folium) (2.1.3)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests->folium) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests->folium) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests->folium) (2.2.3)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests->folium) (2024.8.30)\n",
      "Using cached folium-0.20.0-py2.py3-none-any.whl (113 kB)\n",
      "Using cached branca-0.8.1-py3-none-any.whl (26 kB)\n",
      "Installing collected packages: branca, folium\n",
      "Successfully installed branca-0.8.1 folium-0.20.0\n",
      "* Running on local URL:  http://127.0.0.1:7862\n",
      "* Running on public URL: https://f07c59d6f07f608f5c.gradio.live\n",
      "\n",
      "This share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><iframe src=\"https://f07c59d6f07f608f5c.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import os\n",
    "import gradio as gr\n",
    "from typing import Annotated, TypedDict, List, Union\n",
    "from langgraph.graph import StateGraph, END\n",
    "from langchain.chat_models import ChatOpenAI\n",
    "from langchain_core.prompts import ChatPromptTemplate\n",
    "from langchain_core.output_parsers import StrOutputParser\n",
    "from langgraph.graph.message import add_messages\n",
    "from langchain_core.messages import HumanMessage, AIMessage\n",
    "import json\n",
    "import requests\n",
    "from math import radians, sin, cos, sqrt, atan2\n",
    "from dotenv import load_dotenv\n",
    "from langchain.prompts import PromptTemplate\n",
    "import folium\n",
    "from openai import OpenAI\n",
    "import snowflake.connector\n",
    "import bcrypt\n",
    "import config as snowflake_config # Import the config file\n",
    "\n",
    "# Load environment variables (keeping this for consistency, but will use direct keys)\n",
    "load_dotenv()\n",
    "\n",
    "# Directly using the API keys from api_keys.ipynb\n",
    "\n",
    "\n",
    "# Snowflake Connection Configuration\n",
    "# Now loading directly from the imported config.py\n",
    "class SnowflakeConfig:\n",
    "    SNOWFLAKE_USER = snowflake_config.SNOWFLAKE_USER\n",
    "    SNOWFLAKE_PASSWORD = snowflake_config.SNOWFLAKE_PASSWORD\n",
    "    SNOWFLAKE_ACCOUNT = snowflake_config.SNOWFLAKE_ACCOUNT\n",
    "    SNOWFLAKE_WAREHOUSE = snowflake_config.SNOWFLAKE_WAREHOUSE\n",
    "    SNOWFLAKE_DATABASE = snowflake_config.SNOWFLAKE_DATABASE\n",
    "    SNOWFLAKE_SCHEMA = snowflake_config.SNOWFLAKE_SCHEMA\n",
    "\n",
    "# -------------------------\n",
    "# Snowflake and Authentication Functions\n",
    "# -------------------------\n",
    "def get_snowflake_connection():\n",
    "    try:\n",
    "        conn = snowflake.connector.connect(\n",
    "            user=SnowflakeConfig.SNOWFLAKE_USER,\n",
    "            password=SnowflakeConfig.SNOWFLAKE_PASSWORD,\n",
    "            account=SnowflakeConfig.SNOWFLAKE_ACCOUNT,\n",
    "            warehouse=SnowflakeConfig.SNOWFLAKE_WAREHOUSE,\n",
    "            database=SnowflakeConfig.SNOWFLAKE_DATABASE,\n",
    "            schema=SnowflakeConfig.SNOWFLAKE_SCHEMA\n",
    "        )\n",
    "        return conn\n",
    "    except Exception as e:\n",
    "        print(f\"Snowflake connection error: {e}\")\n",
    "        return None\n",
    "\n",
    "def create_account(username, password):\n",
    "    conn = get_snowflake_connection()\n",
    "    if not conn:\n",
    "        return \"Failed to connect to database.\"\n",
    "    cs = conn.cursor()\n",
    "    hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()\n",
    "    try:\n",
    "        cs.execute(\n",
    "            \"CREATE TABLE IF NOT EXISTS USER_ACCOUNTS (username VARCHAR UNIQUE, password_hash VARCHAR)\"\n",
    "        )\n",
    "        cs.execute(\n",
    "            \"INSERT INTO USER_ACCOUNTS (username, password_hash) VALUES (%s, %s)\",\n",
    "            (username, hashed_pw)\n",
    "        )\n",
    "        conn.commit()\n",
    "        return \"Account created successfully.\"\n",
    "    except snowflake.connector.errors.ProgrammingError as e:\n",
    "        if \"unique constraint\" in str(e).lower():\n",
    "            return \"Username already exists.\"\n",
    "        else:\n",
    "            return f\"Error creating account: {e}\"\n",
    "    except Exception as e:\n",
    "        return f\"An unexpected error occurred during account creation: {e}\"\n",
    "    finally:\n",
    "        cs.close()\n",
    "        conn.close()\n",
    "\n",
    "def login(username, password):\n",
    "    conn = get_snowflake_connection()\n",
    "    if not conn:\n",
    "        return False, \"Failed to connect to database.\"\n",
    "    cs = conn.cursor()\n",
    "    try:\n",
    "        cs.execute(\n",
    "            \"SELECT password_hash FROM USER_ACCOUNTS WHERE username = %s\",\n",
    "            (username,)\n",
    "        )\n",
    "        row = cs.fetchone()\n",
    "        if row:\n",
    "            stored_hash = row[0].encode()\n",
    "            if bcrypt.checkpw(password.encode(), stored_hash):\n",
    "                return True, \"Login successful.\"\n",
    "            else:\n",
    "                return False, \"Invalid password.\"\n",
    "        else:\n",
    "            return False, \"User not found.\"\n",
    "    except Exception as e:\n",
    "        return False, f\"Error during login: {e}\"\n",
    "    finally:\n",
    "        cs.close()\n",
    "        conn.close()\n",
    "\n",
    "def login_fn(username, password):\n",
    "    success, msg = login(username, password)\n",
    "    if success:\n",
    "        return (\n",
    "            gr.update(visible=False),  # Hide login\n",
    "            gr.update(visible=False),  # Hide signup\n",
    "            gr.update(visible=True),   # Show app\n",
    "            msg\n",
    "        )\n",
    "    else:\n",
    "        return (\n",
    "            gr.update(visible=True),\n",
    "            gr.update(visible=True),\n",
    "            gr.update(visible=False),\n",
    "            msg\n",
    "        )\n",
    "\n",
    "def signup_fn(new_username, new_password):\n",
    "    try:\n",
    "        msg = create_account(new_username, new_password)\n",
    "        return msg\n",
    "    except Exception as e:\n",
    "        return f\"Error: {e}\"\n",
    "\n",
    "# -------------------------\n",
    "# AI Fitness Coach Functions\n",
    "# -------------------------\n",
    "\n",
    "def get_openai_llm(model_name=\"gpt-3.5-turbo\"):\n",
    "    return ChatOpenAI(model=model_name, temperature=0.7, openai_api_key=OPENAI_API_KEY)\n",
    "\n",
    "# State definition\n",
    "class State(TypedDict):\n",
    "    user_data: dict\n",
    "    fitness_plan: str\n",
    "    feedback: str\n",
    "    progress: List[str]\n",
    "    messages: Annotated[List[Union[HumanMessage, AIMessage]], add_messages]\n",
    "\n",
    "# Agents\n",
    "def user_input_agent(state: State, llm):\n",
    "    prompt = ChatPromptTemplate.from_template(\n",
    "        \"\\\"\\\"\\\"You are an AI fitness assistant. Process the user input and return a cleaned JSON profile.\\n\\n        Input:\\n        {user_input}\\n\\n        Output only valid JSON.\\\"\\\"\\\"\"\n",
    "    )\n",
    "    chain = prompt | llm | StrOutputParser()\n",
    "    user_profile = chain.invoke({\"user_input\": json.dumps(state[\"user_data\"])})\n",
    "    try:\n",
    "        state[\"user_data\"] = json.loads(user_profile)\n",
    "    except json.JSONDecodeError:\n",
    "        pass\n",
    "    state[\"messages\"].append(AIMessage(content=f\"Processed user profile: {json.dumps(state['user_data'], indent=2)}\"))\n",
    "    return state\n",
    "\n",
    "def routine_generation_agent(state: State, llm):\n",
    "    prompt = ChatPromptTemplate.from_template(\n",
    "        \"\\\"\\\"\\\"You are an AI fitness coach. Based on the user's profile below, create a short weekly workout plan.\\n\\n        Profile:\\n        {user_data}\\n\\n        Use only the days listed in \\\"workout_days\\\".\\n        For each workout day, return:\\n        - Day\\n        - Activity (based on workout_preferences)\\n        - Duration (based on workout_duration)\\n        - Intensity (based on activity_level and health_conditions)\\n\\n        Avoid long descriptions. Output in bullet points. End with 1 simple dietary tip.\\\"\\\"\\\"\"\n",
    "    )\n",
    "    chain = prompt | llm | StrOutputParser()\n",
    "    plan = chain.invoke({\"user_data\": json.dumps(state[\"user_data\"])})\n",
    "    state[\"fitness_plan\"] = plan\n",
    "    state[\"messages\"].append(AIMessage(content=f\"Generated fitness plan: {plan}\"))\n",
    "    return state\n",
    "\n",
    "def feedback_collection_agent(state: State, llm):\n",
    "    prompt = ChatPromptTemplate.from_template(\n",
    "        \"\\\"\\\"\\\"Summarize this user feedback and suggest 1 minor adjustment:\\n\\n        Plan:\\n        {current_plan}\\n\\n        Feedback:\\n        {user_feedback}\\\"\\\"\\\"\"\n",
    "    )\n",
    "    chain = prompt | llm | StrOutputParser()\n",
    "    feedback_summary = chain.invoke({\n",
    "        \"current_plan\": state[\"fitness_plan\"],\n",
    "        \"user_feedback\": state[\"feedback\"]\n",
    "    })\n",
    "    state[\"messages\"].append(AIMessage(content=f\"Feedback analysis: {feedback_summary}\"))\n",
    "    return state\n",
    "\n",
    "def routine_adjustment_agent(state: State, llm):\n",
    "    prompt = ChatPromptTemplate.from_template(\n",
    "        \"\\\"\\\"\\\"Update the following fitness plan based on this feedback:\\n\\n        Plan:\\n        {current_plan}\\n\\n        Feedback:\\n        {feedback}\\n\\n        Return a concise bullet list plan (same format) with adjustments.\\\"\\\"\\\"\"\n",
    "    )\n",
    "    chain = prompt | llm | StrOutputParser()\n",
    "    updated_plan = chain.invoke({\n",
    "        \"current_plan\": state[\"fitness_plan\"],\n",
    "        \"feedback\": state[\"feedback\"]\n",
    "    })\n",
    "    state[\"fitness_plan\"] = updated_plan\n",
    "    state[\"messages\"].append(AIMessage(content=f\"Updated fitness plan: {updated_plan}\"))\n",
    "    return state\n",
    "\n",
    "def progress_monitoring_agent(state: State, llm):\n",
    "    prompt = ChatPromptTemplate.from_template(\n",
    "        \"\\\"\\\"\\\"Summarize progress and suggest next steps.\\n\\n        Data: {user_data}\\n        Plan: {current_plan}\\n        History: {progress_history}\\\"\\\"\\\"\"\n",
    "    )\n",
    "    chain = prompt | llm | StrOutputParser()\n",
    "    progress_update = chain.invoke({\n",
    "        \"user_data\": str(state[\"user_data\"]),\n",
    "        \"current_plan\": state[\"fitness_plan\"],\n",
    "        \"progress_history\": str(state[\"progress\"])\n",
    "    })\n",
    "    state[\"progress\"].append(progress_update)\n",
    "    state[\"messages\"].append(AIMessage(content=f\"Progress update: {progress_update}\"))\n",
    "    return state\n",
    "\n",
    "def motivational_agent(state: State, llm):\n",
    "    prompt = ChatPromptTemplate.from_template(\n",
    "        \"\\\"\\\"\\\"Give a 2-line motivational message and 1 fitness tip.\\n\\n        User:\\n        {user_data}\\n\\n        Plan:\\n        {current_plan}\\n\\n        Recent Progress:\\n        {recent_progress}\\\"\\\"\\\"\"\n",
    "    )\n",
    "    chain = prompt | llm | StrOutputParser()\n",
    "    motivation = chain.invoke({\n",
    "        \"user_data\": str(state[\"user_data\"]),\n",
    "        \"current_plan\": state[\"fitness_plan\"],\n",
    "        \"recent_progress\": state[\"progress\"][-1] if state[\"progress\"] else \"\"\n",
    "    })\n",
    "    state[\"messages\"].append(AIMessage(content=f\"Motivation: {motivation}\"))\n",
    "    return state\n",
    "\n",
    "# Main Coach Class\n",
    "class AIFitnessCoach:\n",
    "    def __init__(self):\n",
    "        self.llm = get_openai_llm()\n",
    "        self.graph = self.create_graph()\n",
    "\n",
    "    def create_graph(self):\n",
    "        workflow = StateGraph(State)\n",
    "        workflow.add_node(\"user_input\", lambda state: user_input_agent(state, self.llm))\n",
    "        workflow.add_node(\"routine_generation\", lambda state: routine_generation_agent(state, self.llm))\n",
    "        workflow.add_node(\"feedback_collection\", lambda state: feedback_collection_agent(state, self.llm))\n",
    "        workflow.add_node(\"routine_adjustment\", lambda state: routine_adjustment_agent(state, self.llm))\n",
    "        workflow.add_node(\"progress_monitoring\", lambda state: progress_monitoring_agent(state, self.llm))\n",
    "        workflow.add_node(\"motivation\", lambda state: motivational_agent(state, self.llm))\n",
    "\n",
    "        workflow.add_edge(\"user_input\", \"routine_generation\")\n",
    "        workflow.add_edge(\"routine_generation\", \"feedback_collection\")\n",
    "        workflow.add_edge(\"feedback_collection\", \"routine_adjustment\")\n",
    "        workflow.add_edge(\"routine_adjustment\", \"progress_monitoring\")\n",
    "        workflow.add_edge(\"progress_monitoring\", \"motivation\")\n",
    "        workflow.add_edge(\"motivation\", END)\n",
    "        workflow.set_entry_point(\"user_input\")\n",
    "        return workflow.compile()\n",
    "\n",
    "    def run(self, user_input):\n",
    "        initial_state = State(\n",
    "            user_data=user_input,\n",
    "            fitness_plan=\"\",\n",
    "            feedback=user_input.get(\"feedback\", \"\"),\n",
    "            progress=[],\n",
    "            messages=[HumanMessage(content=json.dumps(user_input))]\n",
    "        )\n",
    "        final_state = self.graph.invoke(initial_state)\n",
    "        return final_state[\"messages\"]\n",
    "\n",
    "def process_user_input(age, weight, height, gender, primary_goal, target_timeframe, workout_preferences,\n",
    "                       workout_duration, workout_days, activity_level, health_conditions):\n",
    "    user_data = {\n",
    "        \"age\": age,\n",
    "        \"weight\": weight,\n",
    "        \"height\": height,\n",
    "        \"gender\": gender,\n",
    "        \"primary_goal\": primary_goal,\n",
    "        \"target_timeframe\": target_timeframe,\n",
    "        \"workout_preferences\": workout_preferences,\n",
    "        \"workout_duration\": workout_duration,\n",
    "        \"workout_days\": workout_days,\n",
    "        \"activity_level\": activity_level,\n",
    "        \"health_conditions\": health_conditions,\n",
    "        \"feedback\": \"\"\n",
    "    }\n",
    "\n",
    "    coach = AIFitnessCoach()\n",
    "    messages = coach.run(user_data)\n",
    "\n",
    "    fitness_plan = \"\"\n",
    "    progress = \"\"\n",
    "    motivation = \"\"\n",
    "\n",
    "    for message in messages:\n",
    "        if message.type == \"ai\":\n",
    "            content = message.content.strip()\n",
    "\n",
    "            if \"Generated fitness plan:\" in content:\n",
    "                fitness_plan = content.split(\"Generated fitness plan:\")[-1].strip()\n",
    "            elif \"Updated fitness plan:\" in content:\n",
    "                fitness_plan = content.split(\"Updated fitness plan:\")[-1].strip()\n",
    "            elif \"Progress update:\" in content:\n",
    "                progress = content.split(\"Progress update:\")[-1].strip()\n",
    "            elif \"Motivation:\" in content:\n",
    "                motivation = content.split(\"Motivation:\")[-1].strip()\n",
    "\n",
    "    final_output = []\n",
    "\n",
    "    if fitness_plan:\n",
    "        final_output.append(\"🗓️ Weekly Plan:\\n\" + fitness_plan)\n",
    "    if progress:\n",
    "        final_output.append(\"📈 Progress Summary:\\n\" + progress)\n",
    "    if motivation:\n",
    "        final_output.append(\"💬 Motivation:\\n\" + motivation)\n",
    "\n",
    "    return \"\\n\\n\".join(final_output).strip() or \"No fitness plan could be generated. Please try again.\"\n",
    "\n",
    "# -------------------------\n",
    "# Gym Finder Functions\n",
    "# -------------------------\n",
    "\n",
    "def haversine(lat1, lon1, lat2, lon2):\n",
    "    R = 6371.0  # Earth radius in km\n",
    "    dlat = radians(lat2 - lat1)\n",
    "    dlon = radians(lon2 - lon1)\n",
    "    a = sin(dlat / 2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon / 2)**2\n",
    "    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n",
    "    return round(R * c, 2)\n",
    "\n",
    "def get_nearby_gyms(address, radius=5000, max_results=20):\n",
    "    # Step 1: Geocode address\n",
    "    geo_url = f\"https://maps.googleapis.com/maps/api/geocode/json?address={address}&key={GOOGLE_API_KEY}\"\n",
    "    geo_resp = requests.get(geo_url).json()\n",
    "    if geo_resp[\"status\"] != \"OK\":\n",
    "        return [], f\"Geocoding error: {geo_resp['status']}\"\n",
    "\n",
    "    lat = geo_resp[\"results\"][0][\"geometry\"][\"location\"][\"lat\"]\n",
    "    lng = geo_resp[\"results\"][0][\"geometry\"][\"location\"][\"lng\"]\n",
    "\n",
    "    # Step 2: Places Nearby Search\n",
    "    places_url = (\n",
    "        f\"https://maps.googleapis.com/maps/api/place/nearbysearch/json?\"\n",
    "        f\"location={lat},{lng}&radius={radius}&keyword=gym&type=establishment&key={GOOGLE_API_KEY}\"\n",
    "    )\n",
    "    places_resp = requests.get(places_url).json()\n",
    "    if places_resp[\"status\"] != \"OK\":\n",
    "        return [], f\"Places API error: {places_resp['status']}\"\n",
    "\n",
    "    gyms = []\n",
    "    for place in places_resp.get(\"results\", [])[:max_results]:\n",
    "        gym_lat = place[\"geometry\"][\"location\"][\"lat\"]\n",
    "        gym_lng = place[\"geometry\"][\"location\"][\"lng\"]\n",
    "        distance_km = haversine(lat, lng, gym_lat, gym_lng)\n",
    "        place_id = place.get(\"place_id\")\n",
    "        photo_url = None\n",
    "        if \"photos\" in place:\n",
    "            photo_ref = place[\"photos\"][0][\"photo_reference\"]\n",
    "            photo_url = (\n",
    "                f\"https://maps.googleapis.com/maps/api/place/photo\"\n",
    "                f\"?maxwidth=400&photoreference={photo_ref}&key={GOOGLE_API_KEY}\"\n",
    "            )\n",
    "        map_url = f\"https://www.google.com/maps/place/?q=place_id:{place_id}\"\n",
    "\n",
    "        gyms.append({\n",
    "            \"name\": place.get(\"name\"),\n",
    "            \"vicinity\": place.get(\"vicinity\", \"N/A\"),\n",
    "            \"rating\": place.get(\"rating\", \"N/A\"),\n",
    "            \"distance_km\": distance_km,\n",
    "            \"lat\": gym_lat,\n",
    "            \"lng\": gym_lng,\n",
    "            \"map_url\": map_url,\n",
    "            \"photo_url\": photo_url\n",
    "        })\n",
    "\n",
    "    return gyms, None\n",
    "\n",
    "def build_prompt(region, budget, gym_data): # Removed 'disease' parameter\n",
    "    gyms_formatted = \"\\n\".join([\n",
    "        f\"- {g['name']} ({g['vicinity']}, rating {g['rating']}, {g['distance_km']} km away)\\n  Link: {g['map_url']}\"\n",
    "        for g in gym_data\n",
    "    ])\n",
    "\n",
    "    prompt_template = PromptTemplate(\n",
    "        input_variables=[\"region\", \"budget\", \"gyms\"], # Removed \"disease\"\n",
    "        template=(\n",
    "            \"A user with the following profile is looking for a gym:\\n\"\n",
    "            \"- Region/postcode: {region}\\n\"\n",
    "            \"- Budget: {budget}\\n\\n\" # Removed health condition line\n",
    "            \"Here are gyms found nearby:\\n{gyms}\\n\\n\"\n",
    "            \"Please pick 3 gyms that are most suitable. Consider:\\n\"\n",
    "            \"- Whether the gym brand/location implies affordability (within budget)\\n\"\n",
    "            \"- Proximity to the user's region\\n\\n\"\n",
    "            \"Format like this:\\n\"\n",
    "            \"1. [Gym Name] - [estimated price], [distance] – [reason for recommendation]\" # Adjusted accessibility note\n",
    "        )\n",
    "    )\n",
    "\n",
    "    return prompt_template.format(region=region, budget=budget, gyms=gyms_formatted) # Removed disease\n",
    "\n",
    "def get_gpt_recommendations(prompt):\n",
    "    client = OpenAI(api_key=OPENAI_API_KEY)\n",
    "    response = client.chat.completions.create(\n",
    "        model=\"gpt-4\",\n",
    "        messages=[{\"role\": \"user\", \"content\": prompt}],\n",
    "        temperature=0.7\n",
    "    )\n",
    "    return response.choices[0].message.content\n",
    "\n",
    "def create_map(gym_data, center_lat, center_lng):\n",
    "    gym_map = folium.Map(location=[center_lat, center_lng], zoom_start=13)\n",
    "    for gym in gym_data:\n",
    "        popup = f\"<b>{gym['name']}</b><br>{gym['vicinity']}<br>⭐ {gym['rating']}<br>{gym['distance_km']} km\"\n",
    "        if gym[\"photo_url\"]:\n",
    "            popup += f\"<br><img src='{gym['photo_url']}' width='200'>\"\n",
    "        popup += f\"<br><a href='{gym['map_url']}' target='_blank'>Open in Maps</a>\"\n",
    "        folium.Marker(\n",
    "            location=[gym[\"lat\"], gym[\"lng\"]],\n",
    "            popup=folium.Popup(popup, max_width=300),\n",
    "            tooltip=gym[\"name\"]\n",
    "        ).add_to(gym_map)\n",
    "    return gym_map._repr_html_()\n",
    "\n",
    "def gym_finder_pipeline(region, budget): # Removed 'disease' parameter\n",
    "    gym_data, error = get_nearby_gyms(region)\n",
    "    if error:\n",
    "        return error, None\n",
    "    if not gym_data:\n",
    "        return \"No gyms found for the given region. Please try a different location.\", None\n",
    "\n",
    "    prompt = build_prompt(region, budget, gym_data) # Removed disease\n",
    "    try:\n",
    "        recommendations = get_gpt_recommendations(prompt)\n",
    "    except Exception as e:\n",
    "        return f\"OpenAI API Error: {str(e)}\", None\n",
    "\n",
    "    # Use the coordinates of the first found gym as the center for the map\n",
    "    center_lat = gym_data[0][\"lat\"]\n",
    "    center_lng = gym_data[0][\"lng\"]\n",
    "    map_html = create_map(gym_data, center_lat, center_lng)\n",
    "\n",
    "    return recommendations, map_html\n",
    "\n",
    "# -------------------------\n",
    "# Unified Gradio Interface\n",
    "# -------------------------\n",
    "with gr.Blocks() as app:\n",
    "    # Track login state\n",
    "    logged_in = gr.State(False)\n",
    "\n",
    "    # Login interface\n",
    "    with gr.Column(visible=True) as login_section:\n",
    "        gr.Markdown(\"### Login\")\n",
    "        login_username = gr.Textbox(label=\"Username\")\n",
    "        login_password = gr.Textbox(label=\"Password\", type=\"password\")\n",
    "        login_btn = gr.Button(\"Login\")\n",
    "        login_msg = gr.Text(label=\"Login Status\")\n",
    "\n",
    "    # Sign-up interface\n",
    "    with gr.Column(visible=True) as signup_section:\n",
    "        gr.Markdown(\"### Or Sign Up\")\n",
    "        signup_username = gr.Textbox(label=\"New Username\")\n",
    "        signup_password = gr.Textbox(label=\"New Password\", type=\"password\")\n",
    "        signup_btn = gr.Button(\"Sign Up\")\n",
    "        signup_msg = gr.Text(label=\"Sign Up Status\")\n",
    "\n",
    "    # Main app interface (initially hidden)\n",
    "    with gr.Column(visible=False) as app_section:\n",
    "        gr.Markdown(\"## Welcome to FitForAll\")\n",
    "        logout_btn = gr.Button(\"Logout\")\n",
    "\n",
    "        with gr.Tab(\"AI Fitness Coach\"):\n",
    "            gr.Markdown(\"### 🏋️‍♀️ Create Your Personalized Fitness Plan\")\n",
    "            with gr.Row():\n",
    "                age = gr.Number(label=\"Age\")\n",
    "                weight = gr.Number(label=\"Weight (kg)\")\n",
    "                height = gr.Number(label=\"Height (cm)\")\n",
    "                gender = gr.Radio([\"Male\", \"Female\", \"Other\"], label=\"Gender\")\n",
    "\n",
    "            primary_goal = gr.Dropdown([\"Weight loss\", \"Muscle gain\", \"Endurance improvement\", \"General fitness\"], label=\"Primary Goal\")\n",
    "            target_timeframe = gr.Dropdown([\"3 months\", \"6 months\", \"1 year\"], label=\"Target Timeframe\")\n",
    "\n",
    "            workout_preferences = gr.CheckboxGroup(\n",
    "                [\"Cardio\", \"Strength training\", \"Yoga\", \"Pilates\", \"Flexibility exercises\", \"HIIT\"],\n",
    "                label=\"Workout Type Preferences\"\n",
    "            )\n",
    "            workout_duration = gr.Slider(15, 120, step=15, label=\"Preferred Workout Duration (minutes)\")\n",
    "            workout_days = gr.CheckboxGroup(\n",
    "                [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n",
    "                label=\"Preferred Workout Days\"\n",
    "            )\n",
    "\n",
    "            activity_level = gr.Radio(\n",
    "                [\"Sedentary\", \"Lightly active\", \"Moderately active\", \"Highly active\"],\n",
    "                label=\"Current Activity Level\"\n",
    "            )\n",
    "            health_conditions = gr.Textbox(label=\"Health Conditions or Injuries\")\n",
    "\n",
    "            create_button = gr.Button(\"Create Fitness Plan\")\n",
    "            plan_output = gr.Textbox(label=\"Your Personalized Fitness Plan\", lines=12)\n",
    "\n",
    "            create_button.click(\n",
    "                process_user_input,\n",
    "                inputs=[\n",
    "                    age, weight, height, gender, primary_goal, target_timeframe,\n",
    "                    workout_preferences, workout_duration, workout_days,\n",
    "                    activity_level, health_conditions\n",
    "                ],\n",
    "                outputs=plan_output\n",
    "            )\n",
    "\n",
    "        with gr.Tab(\"Gym Finder\"):\n",
    "            gr.Markdown(\"### 📍 Find Nearby Gyms\")\n",
    "            region_input = gr.Textbox(label=\"Your Region or Postcode\")\n",
    "            # Removed the 'disease_input' Gradio component\n",
    "            budget_input = gr.Textbox(label=\"Monthly Budget\", placeholder=\"e.g. £30/month\")\n",
    "            submit_btn = gr.Button(\"Get Gym Recommendations\")\n",
    "            gpt_output = gr.Text(label=\"Recommended Gyms\")\n",
    "            map_output = gr.HTML(label=\"Map of Nearby Gyms\")\n",
    "\n",
    "            submit_btn.click(\n",
    "                fn=gym_finder_pipeline,\n",
    "                inputs=[region_input, budget_input], # Removed disease_input\n",
    "                outputs=[gpt_output, map_output]\n",
    "            )\n",
    "\n",
    "    # --- Button functionality ---\n",
    "    login_btn.click(\n",
    "        fn=login_fn,\n",
    "        inputs=[login_username, login_password],\n",
    "        outputs=[login_section, signup_section, app_section, login_msg],\n",
    "    )\n",
    "\n",
    "    signup_btn.click(\n",
    "        fn=signup_fn,\n",
    "        inputs=[signup_username, signup_password],\n",
    "        outputs=[signup_msg],\n",
    "    )\n",
    "\n",
    "    logout_btn.click(\n",
    "        fn=lambda: (gr.update(visible=True), gr.update(visible=True), gr.update(visible=False), \"\"),\n",
    "        inputs=[],\n",
    "        outputs=[login_section, signup_section, app_section, login_msg]\n",
    "    )\n",
    "\n",
    "# Launch full app\n",
    "if __name__ == \"__main__\":\n",
    "    app.launch(share=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b6cf1a20-acd2-4470-a269-92c84e381bf5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Closing server running on port: 7862\n"
     ]
    }
   ],
   "source": [
    "app.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8335319-b674-47f2-abce-71f9923d5450",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:anaconda3]",
   "language": "python",
   "name": "conda-env-anaconda3-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
